name: Link Check

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  link-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache npm and node_modules
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          # Key on package-lock.json for deterministic installs
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-20-
            ${{ runner.os }}-node-

      - name: Show npm cache status
        run: |
          echo "NPM cache hit: ${{ steps.cache-npm.outputs.cache-hit }}"
          if [ "${{ steps.cache-npm.outputs.cache-hit }}" = 'true' ]; then
            echo "Cache restored — node_modules / npm cache available."
          else
            echo "Cache not found — this run will populate the npm cache."
          fi

      - name: Show Node / npm / npx / markdown-link-check versions
        run: |
          echo "--- Tool versions ---"
          node --version || true
          npm --version || true
          npx --version || true
          echo "--- markdown-link-check version (via npx) ---"
          # Try to print the installed markdown-link-check version; tolerate failure
          npx markdown-link-check --version || true

      - name: Install dependencies (local, deterministic)
        run: |
          # Use npm ci for deterministic installs (requires package-lock.json)
          npm ci --prefer-offline --no-audit --progress=false

      - name: Run markdown link check
        run: |
          set -e
          echo "::group::Checking links in Markdown files"
          # Find markdown files to check (docs/ and top-level README)
          mapfile -t files < <(git ls-files "docs/**/*.md" "*.md" | tr '\r' '\n')
          if [ ${#files[@]} -eq 0 ]; then
            echo "No markdown files found to check"
          else
            for f in "${files[@]}"; do
              echo "Checking $f"
              npx markdown-link-check -q -c .mlc.json "$f" || (echo "Broken link(s) found in $f" && exit 1)
            done
          fi
          echo "::endgroup::"
