{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>see_pdfeditor \u2014 Documentation</p> <p>This folder contains the developer and project documentation for the PDF Editor MVP prototype and planned roadmap.</p> <p>Quick navigation:</p> <ul> <li><code>setup.md</code> \u2014 Developer prerequisites and step-by-step local setup (Windows / PowerShell oriented).</li> <li><code>phases.md</code> \u2014 Phase-by-phase plan and acceptance criteria.</li> <li><code>tasks.md</code> \u2014 Implementation tasks and milestones (developer task list).</li> <li><code>acceptance-tests.md</code> \u2014 Acceptance criteria and test cases for the MVP.</li> <li><code>checklists.md</code> \u2014 Security, QA, and release checklists.</li> </ul> <p>For a hands-on demo, see the <code>prototype/</code> folder which contains a small static prototype (open \u2192 reorder \u2192 export) that can be served with a static server.</p>"},{"location":"acceptance-tests/","title":"Acceptance Tests","text":"<p>Acceptance tests &amp; criteria \u2014 MVP</p> <p>This document lists the acceptance criteria and a small set of test cases to validate the MVP flows.</p> <p>Core acceptance criteria (MVP)</p> <ul> <li>Open &amp; render: The app opens a local PDF and displays pages with correct ordering and readable text.</li> <li>Thumbnail navigation: Thumbnails for all pages are visible; clicking a thumbnail navigates to that page.</li> <li>Reorder pages: The user can reorder pages via drag-and-drop thumbnails; the UI updates immediately.</li> <li>Export: After reordering, the user can export/download a new PDF where pages are in the new order.</li> <li>No server leakage: At no point should the original PDF bytes be transmitted to any remote server in clear form (prototype is fully client-side).</li> </ul> <p>Sample acceptance tests</p> <p>1) Open large PDF    - Given: a 100-page PDF with embedded fonts    - When: user opens file    - Then: thumbnails are generated within 10s on a typical dev machine; first viewable page renders within 3s</p> <p>2) Reorder and export    - Given: a 5-page PDF    - When: user drags page 5 to position 1 and clicks Export    - Then: downloaded PDF opens in Acrobat/Preview with pages in the new order (5,1,2,3,4)</p> <p>3) No outbound network    - Given: the prototype is running locally    - When: user opens a PDF and exports    - Then: browser network panel shows no outbound requests containing the PDF bytes</p> <p>Edge/negative tests</p> <ul> <li>Open a password-protected PDF should show a clear error message that the file is unsupported (or prompt for password if engine supports it).</li> <li>Very large PDFs (&gt;=200MB) should trigger a warning about potential memory pressure.</li> </ul>"},{"location":"checklists/","title":"Checklists","text":"<p>Security, QA &amp; release checklists</p> <p>Security (critical) - Client-side processing: Verify no raw PDF bytes are sent to servers by default. - CSP: enforce a strict Content-Security-Policy, disallow unsafe-eval and inline scripts where possible. - TLS: all endpoints (auth, metadata) must use HTTPS. - Secrets: never bake private keys or secrets into client bundles. - Zero-knowledge uploads: If cloud save is implemented, perform AES-256 client-side encryption and derive keys with PBKDF2/Argon2.</p> <p>QA - Unit tests for core utilities and UI logic. - Integration tests for engine adapters. - E2E tests for core flows (open, annotate, export). - Accessibility: automations (axe) + keyboard/manual checks.</p> <p>Release checklist - All critical/high issues resolved. - Security checklist verified in staging. - Accessibility AA checks pass. - Release notes prepared and reviewed.</p>"},{"location":"phases/","title":"Phases","text":"<p>Project phases \u2014 see_pdfeditor</p> <ol> <li>Discovery &amp; Planning</li> <li>Goal: confirm MVP scope and choose core PDF engine (WASM vs pdf-lib/pdf.js hybrid).</li> <li> <p>Deliverables: prioritized backlog, risk register, acceptance criteria.</p> </li> <li> <p>Design &amp; Prototyping</p> </li> <li>Goal: design UI flows, component library choices, accessibility plan.</li> <li> <p>Deliverables: wireframes, prototype (the <code>prototype/</code> folder demonstrates a minimal viewer + export flow).</p> </li> <li> <p>Implementation (iterative sprints)</p> </li> <li>Core viewer \u2192 Page manipulation \u2192 Annotations \u2192 Text/Image editing \u2192 Export.</li> <li> <p>Deliverables: feature branches, tests, PRs, demo builds.</p> </li> <li> <p>QA &amp; Security</p> </li> <li>Goal: accessibility checks, security checklist validation, performance profiling.</li> <li> <p>Deliverables: test reports, performance baseline.</p> </li> <li> <p>Release &amp; Maintenance</p> </li> <li>Goal: publish, monitor, iterate toward Tier 2/3 features.</li> </ol> <p>Acceptance criteria examples - MVP: user can open a PDF locally, reorder pages, and download a new PDF with the new page order preserved.</p>"},{"location":"setup/","title":"Setup","text":"<p>Developer setup \u2014 see_pdfeditor</p> <p>Prerequisites (Windows, PowerShell / pwsh):</p> <ul> <li>Node.js LTS (&gt;=18)</li> <li>Git</li> <li>VS Code (recommended) + extensions: ESLint, Prettier, Tailwind CSS IntelliSense</li> <li>Python 3.10+ (optional, for backend or running a quick static server)</li> </ul> <p>Quick local steps (PowerShell):</p> <pre><code># Clone the repo (replace &lt;repo-url&gt;)\ngit clone &lt;repo-url&gt; d:\\Projects\\see_pdfeditor\ncd d:\\Projects\\see_pdfeditor\n\n# If prototype uses a static server: use Python's http.server (no install needed if Python is present)\ncd prototype\npython -m http.server 5173\n\n# Then open http://localhost:5173 in your browser and load a PDF.\n</code></pre> <p>Notes: - For full-stack development (if you later add a FastAPI backend), create a Python venv and install requirements. - We recommend using <code>pnpm</code> or <code>npm</code> for frontend package management if you scaffold a Next.js app later.</p>"},{"location":"tasks/","title":"Tasks","text":"<p>Implementation tasks &amp; milestones (developer-facing)</p> <p>This file organizes the work into concrete tasks and suggested estimates for the MVP.</p> <p>Sprint 0 \u2014 Spike (2\u20133 days) - Task: Prototype basic open \u2192 view \u2192 reorder \u2192 export (the <code>prototype/</code> directory is this spike). - Deliverable: Verified demo and decision on core engine (pdf.js + pdf-lib for MVP).</p> <p>Sprint 1 \u2014 Viewer &amp; Page Management (1 week) - Task: Integrate renderer into app shell, thumbnail panel, page navigation. - Task: Implement drag-and-drop reorder with undo/redo. - Tests: Unit tests for reorder logic, E2E smoke (open \u2192 reorder \u2192 export).</p> <p>Sprint 2 \u2014 Annotations &amp; Markup (2 weeks) - Task: Implement highlight/underline/strike and comment pins saved as PDF annotations. - Task: Freehand ink tool and basic shapes. - Tests: Open exported file in Acrobat to verify annotations.</p> <p>Sprint 3 \u2014 Basic Text &amp; Image Editing (2\u20133 weeks) - Task: Add text box tool and image insertion. - Task: Best-effort existing-text edit (font matching heuristics).</p> <p>Sprint 4 \u2014 Export, Autosave &amp; UX polish (1 week) - Task: Implement robust export, autosave to local browser storage, and confirm cross-reader compatibility.</p> <p>Milestones - M1: Spike complete + engine decision - M2: Viewer + page manipulation (usable MVP) - M3: Annotation set complete - M4: Basic text/image editing complete</p> <p>Notes - Break tasks into small PRs; include unit tests where possible. - Track performance of WASM assets and lazy-load editing modules to keep initial load fast.</p>"}]}